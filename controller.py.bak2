'''
Please add your name: Cheng Boon Yew Joseph
Please add your matric number: A0125474E
'''

import sys
import os
import time

from sets import Set

from pox.core import core

import pox.openflow.libopenflow_01 as of
import pox.openflow.discovery
import pox.openflow.spanning_tree
import pox.lib.packet as pkt

from pox.lib.revent import *
from pox.lib.util import dpid_to_str
from pox.lib.addresses import IPAddr, EthAddr

from csv import DictReader

log = core.getLogger()

# We don't want to flood immediately when a switch connects.
# Can be overriden on commandline.
_flood_delay = 0
numRowFirewall = 0
numRowPreimum = 0

class Controller(EventMixin):
    def __init__(self, policyFile):
        self.listenTo(core.openflow)
        core.openflow_discovery.addListeners(self)

        # Initialize forwarding table
        self.macToPort = {}

        # Initialize firewall table
        self.firewallTable = {}

        self.policyFile = policyFile;

        self.hold_down_expired = _flood_delay == 0




    def read_Policy(self, file):
        with open(file, 'r') as f:
            index = 0
            for line in f:
                line = line.strip("\n ' '")
                if index == 0:
                    firstLineItems = line.split(' ')
                    numRowFirewall = int(firstLineItems[0])
                    numRowPreimum = int(firstLineItems[1])

                elif (numRowFirewall >= index):
                    items = line.split(',')
                    # (srcIp, destIp, port) = True
                    self.firewallTable[(items[0], items[1], items[2])] = True

                else:
                    return

                index +=1
#            reader = DictReader(f, delimiter = ",")
##            policies = {}
#            for row in reader:
#                log.info("...ROW = "
#                self.firewallTable[(row[0], row[1])] = row[2]
##                log.info("*** Added firewall rule in src=%s, dest=%s, port=%s", row[0], row[1], row[2])
##        return policies

    def check_rule(self, srcIp, destIp, port):
        try:
            print "CHECK RULE src=" + str(srcIp) + ", dst=" + str(destIp) + ", port=" + str(port)
            entry = self.firewallTable[(srcIp, destIp, port)]
            if entry == True:
                log.debug("FORWARD on src=%s, dest=%s on port=%s", srcIp, destIp, port)
            else:
                log.debug("DROP on src=%s, dest=%s on port=%s", srcIp, destIp, port)
            return entry

        except KeyError:
            log.debug("FAIL TO DROP on src=%s, dest=%s on port=%s", srcIp, destIp, port)
            return False


    def _handle_PacketIn (self, event):
        # install entries to the route table
        #
        # def install_enqueue(event, packet, outport, q_id):
        #     self.macToPort[packet.src] = event.port

        # Check the packet and decide how to route the packet
        def forward(message = None):
            packet = event.parsed

            log.debug("Add to forward table src=%s, port=%s" % (packet.src, event.port))
            self.macToPort[packet.src] = event.port

            # Check firewall
            # if self.check_rule(packet.src, packet.dst, event.port):
            #     log.warning("Firewall to drop packet from %s -> %s on port " % (packet.src, packet.dst, event.port))
            #     drop()
            #     return

            if packet.dst.is_multicast:
                flood()
                # drop()
            else:
                if packet.dst not in self.macToPort:
                    flood("Port for %s unknown -- flooding" % (packet.dst,))
                else:
                    port = self.macToPort[packet.dst]
                    if port == event.port:
                        log.warning("Same port for packet from %s -> %s on %s.%s.  Drop."
                        % (packet.src, packet.dst, dpid_to_str(event.dpid), port))
                        drop(10)
                        return
                    log.debug("installing flow for %s.%i -> %s.%i" %
                    (packet.src, event.port, packet.dst, port))
                    msg = of.ofp_flow_mod()
                    msg.match = of.ofp_match.from_packet(packet, event.port)
                    msg.idle_timeout = 10
                    msg.hard_timeout = 30
                    msg.actions.append(of.ofp_action_output(port = port))
                    msg.data = event.ofp # 6a
                    event.connection.send(msg)


        # When it knows nothing about the destination, flood but don't install the rule
        def flood (message = None):
            """ Floods the packet """
            msg = of.ofp_packet_out()
            if time.time() - event.connection.connect_time >= _flood_delay:
                # Only flood if we've been connected for a little while...

                if self.hold_down_expired is False:
                    # Oh yes it is!
                    self.hold_down_expired = True
                    log.info("%s: Flood hold-down expired -- flooding",
                     dpid_to_str(event.dpid))

                if message is not None: log.debug(message)
                #log.debug("%i: flood %s -> %s", event.dpid,packet.src,packet.dst)
                # OFPP_FLOOD is optional; on some switches you may need to change
                # this to OFPP_ALL.
                msg.actions.append(of.ofp_action_output(port = of.OFPP_FLOOD))
            else:
                pass
                #log.info("Holding down flood for %s", dpid_to_str(event.dpid))
            msg.data = event.ofp
            msg.in_port = event.port
            event.connection.send(msg)

        def drop (duration = None):
            """
            Drops this packet and optionally installs a flow to continue
            dropping similar ones for a while
            """
            log.debug("**** DROPPING PACKET ****")
            if duration is not None:
                if not isinstance(duration, tuple):
                    duration = (duration,duration)
                msg = of.ofp_flow_mod()
                msg.match = of.ofp_match.from_packet(packet)
                msg.idle_timeout = duration[0]
                msg.hard_timeout = duration[1]
                msg.buffer_id = event.ofp.buffer_id
                event.connection.send(msg)
            elif event.ofp.buffer_id is not None:
                msg = of.ofp_packet_out()
                msg.buffer_id = event.ofp.buffer_id
                msg.in_port = event.port
                event.connection.send(msg)


        forward()


    def _handle_ConnectionUp(self, event):
        dpid = dpid_to_str(event.dpid)
        log.debug("Switch %s has come up.", dpid)

        self.read_Policy(self.policyFile)

    # Send the firewall policies to the switch
#    def sendFirewallPolicy(connection, policy):


#    for i in [FIREWALL POLICIES]:
#        sendFirewallPolicy(event.connection, i)


def launch(transparent=False, hold_down=_flood_delay, rule="policy.in"):
    # Run discovery and spanning tree modules
    pox.openflow.discovery.launch()
    pox.openflow.spanning_tree.launch()


    # Check the firewall file exists locally and not empty
    log.info("*** Firewall file : %s", (rule))
    if os.path.isfile(rule) == False:
         #log.debug("*** Firewall file %s not found!",(rule))
         raise RuntimeError(" Firewall rules %s not found!" % (rule))
    else:
         if os.stat(rule).st_size == 0:
             #raise RuntimeError(" Firewall rules %s empty!" % (rule))
             log.info("*** Warning: empty firewall rules!")

    log.info("*** Firewall file: %s found!" % (rule))

    # Starting the controller module
    core.registerNew(Controller, rule)
